const { Sequelize } = require('sequelize');

/* BEGIN;

CREATE TYPE admission_status AS ENUM ('request_in_progress', 'enrolled', 'enrolled_on_other', 'recommended_on_other', 'failed');

CREATE TABLE abiturients ( id integer GENERATED BY DEFAULT AS IDENTITY, email text NOT NULL, password text NOT NULL, token text NOT NULL, is_admin BOOLEAN DEFAULT FALSE, first_name text NOT NULL, second_name text NOT NULL, has_diplom_original boolean NOT NULL DEFAULT FALSE, is_requested boolean NOT NULL DEFAULT FALSE, is_enrolled boolean NOT NULL DEFAULT FALSE, CONSTRAINT pk_abiturients PRIMARY KEY (id));

CREATE TABLE directions ( id integer GENERATED BY DEFAULT AS IDENTITY, caption text NOT NULL, budget_places_number INT NOT NULL, min_ball INT NOT NULL DEFAULT 50, is_filled boolean NOT NULL DEFAULT FALSE, is_finalized boolean NOT NULL DEFAULT FALSE, CONSTRAINT pk_directions PRIMARY KEY (id));

CREATE TABLE abiturient_direction_links ( id integer GENERATED BY DEFAULT AS IDENTITY, abiturient_id integer NOT NULL, direction_id integer NOT NULL, place integer NOT NULL DEFAULT 0, mark integer NOT NULL DEFAULT 0, admission_status admission_status NOT NULL DEFAULT 'request_in_progress', prioritet_number integer NOT NULL DEFAULT 1, has_original_diplom boolean NOT NULL DEFAULT FALSE, CONSTRAINT pk_abiturient_directions_link PRIMARY KEY (id), CONSTRAINT fk_abiturient_directions_link_abiturients_abiturient_id FOREIGN KEY (abiturient_id) REFERENCES abiturients (id) ON DELETE CASCADE, CONSTRAINT fk_abiturient_directions_link_directions_direction_id FOREIGN KEY (direction_id) REFERENCES directions (id) ON DELETE CASCADE);

CREATE OR REPLACE FUNCTION check_duplicate_abiturient_direction()
RETURNS TRIGGER 
LANGUAGE plpgsql
AS $function$
BEGIN
IF EXISTS ( SELECT 1 FROM abiturient_directions_link
	WHERE abiturient_id = NEW.abiturient_id AND direction_id = NEW.direction_id )
THEN RAISE EXCEPTION 'Duplicate entry for abiturient_id % and direction_id %', NEW.abiturient_id, NEW.direction_id; 
END IF;
RETURN NEW; 
END
$function$;

CREATE TRIGGER prevent_duplicate_abiturient_direction
BEFORE INSERT ON abiturient_direction_links
FOR EACH ROW EXECUTE FUNCTION check_duplicate_abiturient_direction();

ALTER TABLE abiturient_direction_links RENAME COLUMN has_original_diplom TO has_diplom_original;

COMMIT; */

const sequelize = new Sequelize(
    'admission_db_test', 
    'postgres', 
    'root', {
  host: 'localhost',
  port: 5432,
  dialect: 'postgres',
});

module.exports = sequelize;